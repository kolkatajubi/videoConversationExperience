{
  "_args": [
    [
      {
        "raw": "wink-bm25-text-search",
        "scope": null,
        "escapedName": "wink-bm25-text-search",
        "name": "wink-bm25-text-search",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\suvo\\Desktop\\videoConversationExperience"
    ]
  ],
  "_from": "wink-bm25-text-search",
  "_hasShrinkwrap": false,
  "_id": "wink-bm25-text-search@3.0.1",
  "_location": "/wink-bm25-text-search",
  "_nodeVersion": "10.15.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/wink-bm25-text-search_3.0.1_1554483013189_0.9417493100398127"
  },
  "_npmUser": {
    "name": "sanjaya",
    "email": "sanjaya@graype.in"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "wink-bm25-text-search",
    "scope": null,
    "escapedName": "wink-bm25-text-search",
    "name": "wink-bm25-text-search",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/wink-bm25-text-search/-/wink-bm25-text-search-3.0.1.tgz",
  "_shasum": "4d807d78e2d8fb91350fc09c4c3fe7b80ef05973",
  "_shrinkwrap": null,
  "_spec": "wink-bm25-text-search",
  "_where": "C:\\Users\\suvo\\Desktop\\videoConversationExperience",
  "author": {
    "name": "Sanjaya Kumar Saxena"
  },
  "bugs": {
    "url": "https://github.com/winkjs/wink-bm25-text-search/issues"
  },
  "dependencies": {
    "wink-helpers": "^2.0.0",
    "wink-nlp-utils": "^2.0.4"
  },
  "description": "Configurable BM25 Text Search Engine with simple semantic search support",
  "devDependencies": {
    "chai": "^4.2.0",
    "coveralls": "^3.0.3",
    "docco": "^0.8.0",
    "eslint": "^5.16.0",
    "istanbul": "^1.1.0-alpha.1",
    "mocha": "^6.0.2",
    "mocha-lcov-reporter": "^1.3.0",
    "standard-changelog": "^2.0.7"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-RpLFOBaqZvvyIt4rDfWmVBgULvKc4PLFI3NoBl03M2dWUXMtFcqCQfYdbH5KrkH7m7xu+ROPguM6ZspS4zk31g==",
    "shasum": "4d807d78e2d8fb91350fc09c4c3fe7b80ef05973",
    "tarball": "https://registry.npmjs.org/wink-bm25-text-search/-/wink-bm25-text-search-3.0.1.tgz",
    "fileCount": 11,
    "unpackedSize": 69160,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcp4dFCRA9TVsSAnZWagAAhzMP/34fOp71Y7unJVRNrqPy\nM+1+lD5rfA26CnbtmA5U/XV8yWYozVWF5EaH2M2LLnJTeJfo6el05TkDeZ65\nRwYLVJZ75LdJuWpUnIkcenHnOjolfpts8T57IVJlRXMP0HYR2xmdwxtzZW+v\nkfYA1Fr0bY9u8FzUExOdncLvxsaiSK1TPeJgTUKxz7dHSt3LHJ71qobiCcJQ\nIh6sL4x1N2L/qs9nl4NQC53l5MCwUHlnW2026LxIDsQEntJaeP2f2JGwZ7Fm\nuOfJohGsNpWGqjP00uw/c2BwJl7j5Kdf8GAy3IyhZ2JZbuk6UCOXUsHkgQRq\neJlvZhRQ3gWfq2NcLA6Sd5+bp5C6+C6ovTpzXhfr//+4xoHGqwaciuUxC2pI\nJjWtTT4v0/ExzkTLWoA+MAyzOXmyh8LFxsES85mhRtLkC6Ouqbsq7gi74jIW\ncuSPqlTSIsXVg0UaWb/c4/hiJcrG1A5bUlZmvPyDcS3gzm+9vtOkXYnLwrl1\nctnqVRkOwOhTySPyE8a/60L17lSrpPuSfDJ2lMqXmQ20m5kcY8WbGdSStRkf\n3yaVKzR31qyiRI/H6Tpo1dwllbvB5SCoPr0EkpVMcN5LpA4bfQkvwJoMVqSK\nGcdJZOnEFNWI8uvux0GSaKMw5hZ9ZTc+NgPr4CTIpRifzFlBabkIMYCq4J9k\nNu6j\r\n=h97n\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "32b62ec323789da893c58ac0bd1352987ab0aef1",
  "homepage": "http://winkjs.org/",
  "keywords": [
    "BM25",
    "BM25F",
    "TFIDF",
    "TF-IDF",
    "In Memory Search",
    "Semantic Search",
    "Full Text Search",
    "NLP",
    "Natural Language Processing",
    "wink"
  ],
  "license": "MIT",
  "main": "src/wink-bm25-text-search.js",
  "maintainers": [
    {
      "name": "prtksxna",
      "email": "prtksxna@gmail.com"
    },
    {
      "name": "r4chn4",
      "email": "rachna@graype.in"
    },
    {
      "name": "sanjaya",
      "email": "sanjaya@graype.in"
    }
  ],
  "name": "wink-bm25-text-search",
  "optionalDependencies": {},
  "readme": "\n# wink-bm25-text-search\n\nFast Full Text Search based on [BM25](http://opensourceconnections.com/blog/2015/10/16/bm25-the-next-generation-of-lucene-relevation/)\n\n### [![Build Status](https://api.travis-ci.org/winkjs/wink-bm25-text-search.svg?branch=master)](https://travis-ci.org/winkjs/wink-bm25-text-search) [![Coverage Status](https://coveralls.io/repos/github/winkjs/wink-bm25-text-search/badge.svg?branch=master)](https://coveralls.io/github/winkjs/wink-bm25-text-search?branch=master) [![Inline docs](http://inch-ci.org/github/winkjs/wink-bm25-text-search.svg?branch=master)](http://inch-ci.org/github/winkjs/wink-bm25-text-search) [![dependencies Status](https://david-dm.org/winkjs/wink-bm25-text-search/status.svg)](https://david-dm.org/winkjs/wink-bm25-text-search) [![devDependencies Status](https://david-dm.org/winkjs/wink-bm25-text-search/dev-status.svg)](https://david-dm.org/winkjs/wink-bm25-text-search?type=dev) [![Gitter](https://img.shields.io/gitter/room/nwjs/nw.js.svg)](https://gitter.im/winkjs/Lobby)\n\n\n<img align=\"right\" src=\"https://decisively.github.io/wink-logos/logo-title.png\" width=\"100px\" >\n\nAdd fast in-memory semantic search to your application using **`wink-bm25-text-search`**. It is based on state-of-the-art text search algorithm — BM25 — a Probabilistic Relevance Framework for document retrieval. It's [API](#api) offers a rich set of features:\n\n1. **Scalable Design** allows easy addition/customization of features like **geolocation** and more.\n\n2. **Search on exact values of pre-defined fields**, makes search results more relevant.\n\n3. **Index optimized for size and speed** can be exported (and imported) from the added documents in a JSON format.\n\n4. **Full control over BM25 configuration** — while default values work well for most situations, there is an option to control them.\n\n5. **Add semantic flavor** to the search by:\n    1. Assigning different numerical weights to the fields. A negative field weight will pull down the document's score whenever a match with that field occurs.\n    2. Using `amplifyNegation()` and `propagateNegations()` from [wink-nlp-utils](https://www.npmjs.com/package/wink-nlp-utils) will ensure different search results for query texts containing phrases like **\"good\"** and **\"not good\"**.\n    3. Defining different text preparation tasks separately for the fields and query text.\n\n6. **Complete flexibility in text preparation** — perform tasks such as tokenization and stemming using [wink-nlp-utils](https://www.npmjs.com/package/wink-nlp-utils) or any other package of your choice.\n\n\n\n## Installation\nUse [npm](https://www.npmjs.com/package/wink-bm25-text-search) to install:\n```sh\nnpm install wink-bm25-text-search --save\n```\n\n\n## Example [![Try on Runkit](https://badge.runkitcdn.com/wink-bm25-text-search.svg)](https://npm.runkit.com/wink-bm25-text-search)\n\n\n```javascript\n// Load wink-bm25-text-search\nvar bm25 = require( '../src/wink-bm25-text-search' );\n// Create search engine's instance\nvar engine = bm25();\n// Load NLP utilities\nvar nlp = require( 'wink-nlp-utils' );\n// Load sample data (load any other JSON data instead of sample)\nvar docs = require( '../sample-data/data-for-wink-bm25.json' );\n\n// Define preparatory task pipe!\nvar pipe = [\n  nlp.string.lowerCase,\n  nlp.string.tokenize0,\n  nlp.tokens.removeWords,\n  nlp.tokens.stem,\n  nlp.tokens.propagateNegations\n];\n// Contains search query.\nvar query;\n\n// Step I: Define config\n// Only field weights are required in this example.\nengine.defineConfig( { fldWeights: { title: 1, body: 2 } } );\n// Step II: Define PrepTasks pipe.\n// Set up 'default' preparatory tasks i.e. for everything else\nengine.definePrepTasks( pipe );\n\n// Step III: Add Docs\n// Add documents now...\ndocs.forEach( function ( doc, i ) {\n  // Note, 'i' becomes the unique id for 'doc'\n  engine.addDoc( doc, i );\n} );\n\n// Step IV: Consolidate\n// Consolidate before searching\nengine.consolidate();\n\n// All set, start searching!\nquery = 'not studied law';\n// `results` is an array of [ doc-id, score ], sorted by score\nvar results = engine.search( query );\n// Print number of results.\nconsole.log( '%d entries found.', results.length );\n// -> 1 entries found.\n// results[ 0 ][ 0 ] i.e. the top result is:\nconsole.log( docs[ results[ 0 ][ 0 ] ].body );\n// -> George Walker Bush (born July 6, 1946) is an...\n// -> ... He never studied Law...\n\n// Whereas if you search for `law` then multiple entries will be\n// found except the above entry!\n```\n\n## API\n\n#### defineConfig( config )\nDefines the configuration from the `config` object. This object defines following 3 properties:\n\n1. The `fldWeights` (mandatory) is an object where each *key* is the *document's field name* and the *value* is the *numerical weight* i.e. the importance of that field.\n\n2. The `bm25Params` (optional) is also an object that defines upto 3 keys viz. `k1`, `b`, and `k`. Their default values are respectively `1.2`, `0.75`, and `1`. Note: **`k1`** controls TF saturation; **`b`** controls degree of normalization, and **`k`** manages IDF.\n\n3. The `ovFldNames` (optional) is an array containing the names of the fields, whose original value must be retained. This is useful in reducing the search space using **filter** in `search()` api call.\n\n#### definePrepTasks( tasks [, field ] )\n\nDefines the text preparation `tasks` to transform raw incoming text into an array of tokens required during `addDoc()`, and `search()` operations. It returns the count of `tasks`.\n\nThe `tasks` should be an array of functions. The first function in this array must accept a string as input; and the last function must return an array of tokens as JavaScript Strings. Each function must accept one input argument and return a single value.  \n\nThe second argument — `field` is optional. It defines the `field` of the document for which the `tasks` will be defined; in absence of this argument, the `tasks` become the default for everything else. The configuration must be defined via `defineConfig()` prior to this call.\n\nAs illustrated in the example above, [wink-nlp-utils](https://www.npmjs.com/package/wink-nlp-utils) offers a rich set of such functions.\n\n#### addDoc( doc, uniqueId )\nAdds the `doc` with the `uniqueId` to the BM25 model. Prior to adding docs, `defineConfig()` and `definePrepTasks()` must be called. It accepts structured JSON documents as input for creating the model. Following is an example document structure of the sample data JSON contained in this package:\n```\n{\n  title: 'Barack Obama',\n  body: 'Barack Hussein Obama II born August 4, 1961 is an American politician...'\n  tags: 'democratic nobel peace prize columbia michelle...'\n}\n```\n\nThe sample data is created using excerpts from [Wikipedia](https://en.wikipedia.org/wiki/Main_Page) articles such as one on [Barack Obama](https://en.wikipedia.org/wiki/Barack_Obama).\n\nIt has an alias `learn( doc, uniqueId )` to maintain API level uniformity across various [wink](https://www.npmjs.com/~sanjaya) packages such as [wink-naive-bayes-text-classifier](https://www.npmjs.com/package/wink-naive-bayes-text-classifier).\n\n\n\n#### consolidate( fp )\nConsolidates the BM25 model for all the added documents. The `fp` defines the precision at\nwhich term frequency values are stored. The default value is 4 and is good enough for most situations. It is a prerequisite for `search()` and documents cannot be added post consolidation.\n\n#### search( text [, limit, filter, params ] )\nSearches for the `text` and returns upto the `limit` number of results. The `filter` should be a function that must return true or false based on `params`. Think of it as Javascript Array's filter function. It receives two arguments viz. (a) an object containing field name/value pairs as defined via `ovFldNames` in `defineConfig()`, and (b) the `params`.\n\nThe last three arguments `limit`, `filter` and `params` are optional. The default value of `limit` is **10**.\n\nThe result is an array of\n`[ uniqueId, relevanceScore ]`, sorted on the `relevanceScore`.\n\nLike `addDoc()`, it also has an alias `predict( doc, uniqueId )` to maintain API level uniformity across various [wink](https://www.npmjs.com/~sanjaya) packages such as [wink-naive-bayes-text-classifier](https://www.npmjs.com/package/wink-naive-bayes-text-classifier).\n\n\n#### exportJSON()\nThe BM25 model can be exported as JSON text that may be saved in a file. It is a good idea to export JSON prior to consolidation and use the same whenever more documents need to be added; whereas JSON exported after consolidation is only good for search operation.\n\n#### importJSON( json )\nAn existing JSON BM25 model can be imported for search. It is essential to call `definePrepTasks()` before attempting to search.\n\n#### reset()\nIt completely resets the BM25 model by re-initializing all the variables, except the preparatory tasks.\n\n\n## Need Help?\nIf you spot a bug and the same has not yet been reported, raise a new [issue](https://github.com/winkjs/wink-bm25-text-search/issues) or consider fixing it and sending a pull request.\n\n### About wink\n[Wink](http://winkjs.org/) is a family of open source packages for **Statistical Analysis**, **Natural Language Processing** and **Machine Learning** in NodeJS. The code is **thoroughly documented** for easy human comprehension and has a **test coverage of ~100%** for reliability to build production grade solutions.\n\n\n## Copyright & License\n**wink-bm25-text-search** is copyright 2017-19 [GRAYPE Systems Private Limited](http://graype.in/).\n\nIt is licensed under the terms of the MIT License.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/winkjs/wink-bm25-text-search.git"
  },
  "runkitExampleFilename": "runkit/example.js",
  "scripts": {
    "changelog": "standard-changelog",
    "coveralls": "istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage",
    "docs": "docco -o ./docs/ ./src/*.js",
    "lint": "eslint ./src/*.js ./test/*.js ./runkit/*.js",
    "pretest": "npm run lint",
    "test": "istanbul cover _mocha ./test/"
  },
  "version": "3.0.1"
}
